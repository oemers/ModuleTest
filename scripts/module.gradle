if (isIndependent()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        if (isModule.toBoolean()){
            //applicationId "com.ryy.${this.name}"
            //println("this == ${this.name} , applicationId")

        }
        //println(project.buildFile.name)

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }
    }

    sourceSets {
        main {
            if (isIndependent()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    lintOptions {
        abortOnError false
    }

}

/**
 * 通过修改 project - gradle.properties 的 isModule 值来控制 是否可以独立编译
 * @return app可以独立编译，NCComponent中的项目可以独立编译
 */
def isIndependent() {
    //是app module ，独立编译
    if (this.name.startsWith("app")) {
        println("app is independent! this.name = ${this.name}")
        return true
    }

    //没有开启独立编译选项，所以为library
    if (!isModule.toBoolean()) {
        println("not independent!")
        return false
    }

    //开启了独立编译选项，但是不属于业务组件，所以为 library
    if (!project.buildFile.path.contains("NCComponent")) {
        println("this module's is not [NCComponent] , this.name = ${this.name}")
        return false
    }
    println("this module is independent!")
    return true
}